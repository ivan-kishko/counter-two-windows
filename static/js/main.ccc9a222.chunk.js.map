{"version":3,"sources":["components/counter/Counter.tsx","components/settings/Settings.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Counter","props","Grid","item","xs","style","border","borderRadius","padding","background","Paper","elevation","height","width","Typography","variant","paddingTop","color","counterValue","maxValue","minValue","Button","size","margin","onClick","incrementCounter","disabled","resetCounter","to","textDecoration","useStyles","makeStyles","noBorder","Settings","classes","flexDirection","container","alignItems","justify","TextField","type","value","InputProps","inputProps","min","max","notchedOutline","backgroundColor","error","textAlign","outline","marginRight","onChange","adjustMaxValue","adjustMinValue","setNewCounter","PATH","App","useState","setMinValue","setMaxValue","counter","setCounter","useEffect","maxAsString","localStorage","getItem","newMax","JSON","parse","setItem","stringify","minAsString","newMin","currentAsString","newCurrent","e","Number","currentTarget","className","Container","fixed","minHeight","path","exact","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ccc9a222.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport {Button, Grid, Paper, Typography} from \"@material-ui/core\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype CounterPropsType = {\r\n    counterValue: number\r\n    incrementCounter: () => void\r\n    resetCounter: () => void\r\n    maxValue: number\r\n    minValue: number\r\n}\r\n\r\nexport function Counter(props: CounterPropsType) {\r\n\r\n    return (\r\n        <div>\r\n            <Grid item xs={12}\r\n                  style={{border: '4px solid black', borderRadius: '5px', padding: '5px', background: 'white'}}>\r\n                <Paper elevation={0} style={{height: '200px', width: '400px', background: 'white'}}>\r\n                    <Typography\r\n                        variant={\"h1\"}\r\n                        style={{\r\n                            paddingTop: '40px',\r\n                            color: props.counterValue === props.maxValue ? 'red' : 'black',\r\n                        }}>{props.counterValue}</Typography>\r\n                    <span>min value: {props.minValue} |</span><span> max value: {props.maxValue}</span>\r\n                </Paper>\r\n            </Grid>\r\n            <Grid item xs={12}\r\n                  style={{border: '4px solid black', borderRadius: '5px', padding: '5px', background: 'white'}}>\r\n                <Button\r\n                    variant={\"contained\"}\r\n                    size={\"large\"}\r\n                    color={\"primary\"}\r\n                    style={{margin: '5px 15px 5px 15px'}}\r\n                    onClick={props.incrementCounter}\r\n                    disabled={props.counterValue === props.maxValue}>INC</Button>\r\n                <Button variant={\"contained\"} size={\"large\"} color={\"primary\"} style={{margin: '5px 15px 5px 15px'}}\r\n                        onClick={props.resetCounter}>RESET</Button>\r\n                <NavLink to={'/settings'} style={{textDecoration: 'none', color: \"white\"}}>\r\n                    <Button variant={\"contained\"} size={\"large\"} color={\"secondary\"}\r\n                            style={{margin: '5px 15px 5px 15px'}}>SET</Button>\r\n                </NavLink>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport {Button, Grid, makeStyles, TextField, Typography} from \"@material-ui/core\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    noBorder: {\r\n        border: \"none\",\r\n    },\r\n}));\r\n\r\ntype SettingsPropsType = {\r\n    minValue: number\r\n    maxValue: number\r\n    adjustMinValue: (e: ChangeEvent<HTMLInputElement>) => void\r\n    adjustMaxValue: (e: ChangeEvent<HTMLInputElement>) => void\r\n    error: boolean\r\n    setNewCounter: () => void\r\n}\r\n\r\nexport function Settings(props: SettingsPropsType) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n            <Grid item xs={12} style={{\r\n                border: '4px solid black',\r\n                borderRadius: '5px',\r\n                padding: '5px',\r\n                background: 'white',\r\n                flexDirection: \"row\"\r\n            }}>\r\n                <Grid container style={{height: '100px', width: '400px', background: 'white'}} alignItems={\"baseline\"}\r\n                      justify={\"space-between\"}>\r\n                    <Typography variant={\"h5\"} style={{paddingTop: '30px', color: \"black\"}}>MAX VALUE:</Typography>\r\n                    <TextField\r\n                        type=\"number\"\r\n                        value={props.maxValue}\r\n                        InputProps={{\r\n                            inputProps: {min: 0, max: 100},\r\n                            classes: {notchedOutline: classes.noBorder}\r\n                        }}\r\n                        variant={\"outlined\"}\r\n                        size={\"small\"}\r\n                        style={{\r\n                            backgroundColor: props.error ? 'hotpink' : 'whitesmoke',\r\n                            textAlign: \"center\",\r\n                            border: props.error ? '2px solid red' : '2px solid black',\r\n                            borderRadius: '5px',\r\n                            outline: \"none\",\r\n                            marginRight: '2px'\r\n                        }}\r\n                        onChange={props.adjustMaxValue}\r\n                    />\r\n                </Grid>\r\n                <Grid container style={{height: '100px', width: '400px', background: 'white'}} alignItems={\"baseline\"}\r\n                      justify={\"space-between\"}>\r\n                    <Typography variant={\"h5\"} style={{paddingTop: '30px', color: \"black\"}}>MIN VALUE:</Typography>\r\n                    <TextField\r\n                        type=\"number\"\r\n                        value={props.minValue}\r\n                        InputProps={{\r\n                            inputProps: {min: 0, max: 100},\r\n                            classes: {notchedOutline: classes.noBorder}\r\n                        }}\r\n                        variant={\"outlined\"}\r\n                        size={\"small\"}\r\n                        style={{\r\n                            backgroundColor: props.error ? 'hotpink' : 'whitesmoke',\r\n                            textAlign: \"center\",\r\n                            border: props.error ? '2px solid red' : '2px solid black',\r\n                            borderRadius: '5px',\r\n                            outline: \"none\"\r\n                        }}\r\n                        onChange={props.adjustMinValue}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs={12}\r\n                  style={{border: '4px solid black', borderRadius: '5px', padding: '5px', background: 'white'}}>\r\n                <NavLink to={'/counter'} style={{textDecoration: 'none', color: \"white\"}}>\r\n                    <Button\r\n                        variant={\"contained\"}\r\n                        size={\"large\"}\r\n                        color={\"secondary\"}\r\n                        style={{margin: '5px 15px 5px 15px'}}\r\n                        disabled={props.error}\r\n                        onClick={props.setNewCounter}>SET\r\n                    </Button>\r\n                </NavLink>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport './App.css';\nimport {Container, Grid} from \"@material-ui/core\";\nimport {Redirect, Route, Switch} from \"react-router-dom\";\nimport {Counter} from \"./components/counter/Counter\";\nimport {Settings} from \"./components/settings/Settings\";\n\nconst PATH = {\n    COUNTER: '/counter',\n    SETTINGS: '/settings'\n}\n\nfunction App() {\n    const [minValue, setMinValue] = useState<number>(0)\n\n    const [maxValue, setMaxValue] = useState<number>(5)\n\n    const [counter, setCounter] = useState<number>(minValue)\n\n    //Local storage logic\n    //maxvalue useEffect\n    useEffect(() => {\n        let maxAsString = localStorage.getItem(\"maxValue\")\n        if (maxAsString) {\n            let newMax = JSON.parse(maxAsString)\n            setMaxValue(newMax)\n        }\n    }, [])\n\n    useEffect(() => {\n        localStorage.setItem(\"maxValue\", JSON.stringify(maxValue))\n    }, [maxValue])\n\n    //minvalue useEffect\n    useEffect(() => {\n        let minAsString = localStorage.getItem(\"minValue\")\n        if (minAsString) {\n            let newMin = JSON.parse(minAsString)\n            setMinValue(newMin)\n        }\n    }, [])\n\n    useEffect(() => {\n        localStorage.setItem(\"minValue\", JSON.stringify(minValue))\n    }, [minValue])\n\n    //current value useEffect\n    useEffect(() => {\n        let currentAsString = localStorage.getItem(\"currentValue\")\n        if (currentAsString) {\n            let newCurrent = JSON.parse(currentAsString)\n            setCounter(newCurrent)\n        }\n    }, [])\n\n    useEffect(() => {\n        localStorage.setItem(\"currentValue\", JSON.stringify(counter))\n    }, [counter])\n\n    //Counter logic\n    const incrementCounter = () => {\n        setCounter(counter + 1)\n    }\n\n    const resetCounter = () => {\n        setCounter(minValue)\n    }\n\n    //Settings logic\n    const adjustMinValue = (e: ChangeEvent<HTMLInputElement>) => {\n        setMinValue(Number(e.currentTarget.value))\n    }\n\n    const adjustMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\n        setMaxValue(Number(e.currentTarget.value))\n    }\n\n    const setNewCounter = () => {\n        setCounter(minValue)\n    }\n\n    const setErrorValue = () => {\n        return minValue >= maxValue\n    }\n\n    return (\n        <div className=\"App\">\n            <Container fixed>\n                <Grid container justify={\"center\"} alignItems={\"center\"} style={{minHeight: '100vh'}}>\n                    <Switch>\n                        <Route path={'/'} exact render={() => <Redirect to={PATH.COUNTER}/>}/>\n\n                        <Route path={PATH.COUNTER} render={() => <Counter\n                            counterValue={counter}\n                            incrementCounter={incrementCounter}\n                            resetCounter={resetCounter}\n                            maxValue={maxValue}\n                            minValue={minValue}\n                        />}/>\n                        <Route path={PATH.SETTINGS} render={() => <Settings\n                            minValue={minValue}\n                            maxValue={maxValue}\n                            adjustMinValue={adjustMinValue}\n                            adjustMaxValue={adjustMaxValue}\n                            error={setErrorValue()}\n                            setNewCounter={setNewCounter}\n                        />}/>\n                    </Switch>\n                </Grid>\n            </Container>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <App/>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}